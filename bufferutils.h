/**	@file bufferutils.h	Public interface for bufferutils.c	@version 0.91	@author Paul Chambers	@date 2005-2006*//* $Header$ *//**	The maximum 'chunk' that can be processed.	Single functions larger than this will be output	as multiple chunks, and so won't be	processed	completely (though they'll still be copied to	the output).		Though if this limitation affects you, it's	probably the least of your worries...*/#define qBufferSize	65000/**	a pair of pointers that defines a 'run' of characters.*/typedef struct {	char *start;/**< points at the first character in the range */	char *end;	/**< points just past the last character in the range */	int	count;	/**< not a character count - a count of occurances */} tRange;/**	Contains accumulated characters and state from parser.	This is the main structure for the parser. It accumulates a block of	characters, and the various state information that the parser's	state machine determines is significant.	Output is generated when a buffer is flushed using flushBuffer(),	which uses the state to determine if special processing is needed	to output the buffer's contents.	@see processFile()	@see flushBuffer()*/typedef struct {	/* the final destination */	FILE *file;				/**< output file */	bool	fileComment;	/**< only set if first non-whitespace in input is a comment */	/* the following are at depthCurly 0 */	tRange	description;	/**< last comment */	tRange	function;		/**< last statement->round bracket */ 	tRange	arglist;		/**< ( to ) at depthRound 0 */	tRange	body;			/**< { to } at depthCurly 0 */	/* the following are only below depthCurly 0 */	char *commentStart;		/**< used to parse comments */	char *statementStart;	/**< used to parse statements */	tStringList	*notes;		/**< 'notes' pulled from comments */	tStringList	*todos;		/**< 'todos' pulled from comments */	tStringList *retvals;	/**< return values pulled from return statements */	char *ptr; /**< our 'place' in the buffer */	char *end; /**< speeds up boundary checking (i.e only compute it once) */	/** storage for the raw characters we accumulate as we're parsing */	char data[qBufferSize];} tBuffer;void initBuffer(tBuffer *buf, FILE *file);void clearBuffer(tBuffer *buf);void dumpBlock(tBuffer *buf, const char *start, const char *end);int emitChar(tBuffer *buf, int c);